{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-217bbec5-c68f-4fa6-9a27-347b7db732f5.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_backend_state":1730400702643,"last_ipynb_save":1730403099447,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1729895741224,"exec_count":7,"id":"f3b8ce","input":"x = torch.ones(12).reshape(3,4)\ny = torch.ones(12).reshape(3,4) * 2\nadd = x+y\nsub = x-y\nmult = x*y\nprint(\"Tensor 1 = \",x)\nprint(\"Tensor 2 = \",y)\n\nprint(\"Adiidion = \",add)\nprint(\"Subtraction = \",sub)\nprint(\"Multiplication = \",mult)","kernel":"python3","last":1010,"output":{"0":{"name":"stdout","text":"Tensor 1 =  tensor([[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\nTensor 2 =  tensor([[2., 2., 2., 2.],\n        [2., 2., 2., 2.],\n        [2., 2., 2., 2.]])\nAdiidion =  tensor([[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]])\nSubtraction =  tensor([[-1., -1., -1., -1.],\n        [-1., -1., -1., -1.],\n        [-1., -1., -1., -1.]])\nMultiplication =  tensor([[2., 2., 2., 2.],\n        [2., 2., 2., 2.],\n        [2., 2., 2., 2.]])\n"}},"pos":3,"start":1729895741051,"state":"done","type":"cell"}
{"cell_type":"code","end":1729896209219,"exec_count":10,"id":"3edd0a","input":"x = torch.arange(4, dtype=float)\nx.requires_grad_(True)\nY = sum((x**2) - x)\nY.backward()\nx.grad\n","kernel":"python3","output":{"0":{"data":{"text/plain":"tensor([-1.,  1.,  3.,  5.], dtype=torch.float64)"},"exec_count":10}},"pos":5,"start":1729896208665,"state":"done","type":"cell"}
{"cell_type":"code","end":1729897000553,"exec_count":16,"id":"ffc914","input":"A = torch.arange(1,13).reshape(3,4)\nB = torch.tensor([-1,-2,-2,-2,-3,-3,-3,-4,-4]).reshape(3,3)\nBA = torch.mm(B,A)\nAt = A.t()\nAtReshape = At.reshape(6,2)\nAsum = torch.sum(A, dim=1)\nBscale = B + 5\nprint(\"A = \",A)\nprint(\"B = \",B)\nprint(\"B x A = \",BA)\nprint(\"A transpose = \",At)\nprint(\"A transpose reshape = \",AtReshape)\nprint(\"A sum = \",Asum)\nprint(\"B scaled = \",Bscale)\n","kernel":"python3","output":{"0":{"name":"stdout","text":"A =  tensor([[ 1,  2,  3,  4],\n        [ 5,  6,  7,  8],\n        [ 9, 10, 11, 12]])\nB =  tensor([[-1, -2, -2],\n        [-2, -3, -3],\n        [-3, -4, -4]])\nB x A =  tensor([[-29, -34, -39, -44],\n        [-44, -52, -60, -68],\n        [-59, -70, -81, -92]])\nA transpose =  tensor([[ 1,  5,  9],\n        [ 2,  6, 10],\n        [ 3,  7, 11],\n        [ 4,  8, 12]])\nA transpose reshape =  tensor([[ 1,  5],\n        [ 9,  2],\n        [ 6, 10],\n        [ 3,  7],\n        [11,  4],\n        [ 8, 12]])\nA sum =  tensor([10, 26, 42])\nB scaled =  tensor([[4, 3, 3],\n        [3, 2, 2],\n        [2, 1, 1]])\n"}},"pos":7,"start":1729897000545,"state":"done","type":"cell"}
{"cell_type":"code","end":1729900828889,"exec_count":45,"id":"942a1d","input":"\nq = torch.arange(1.0,3.0,0.1)\nq.requires_grad_(True)\ndef f(a):\n    return torch.log(a)**2\ny=f(q)\ny.backward(gradient=torch.ones(len(y)))\nyprime=q.grad\nd2l.plot(q.detach().numpy(), [y.detach().numpy(), yprime.detach().numpy()], 'x', 'f(x)', legend=['f(x)', 'derivative'])","kernel":"python3","last":19,"output":{"0":{"data":{"image/svg+xml":"05da3134c41276f325128923f3753a0028127b97","text/plain":"<Figure size 350x250 with 1 Axes>"}}},"pos":9,"start":1729900827843,"state":"done","type":"cell"}
{"cell_type":"code","end":1729901318105,"exec_count":48,"id":"be7b93","input":"import torch\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib_inline import backend_inline\nfrom d2l import torch as d2l\nimport os\nimport pandas as pd","kernel":"python3","last":4,"pos":1,"start":1729901318098,"state":"done","type":"cell"}
{"cell_type":"code","end":1729903911170,"exec_count":58,"id":"4825b5","input":"if not os.path.exists(\"data\"):\n    os.makedirs(\"data\")\ndata_file = os.path.join(\"data\", \"customer_list.csv\")\nwith open(data_file, 'w') as f:\n    f.write('''Customer ID,Age,Gender,Purchase amount\n123,,Male,130\n135,27,,120\n112,24,Female,80\n142,,Female,30\n,,,45\n100,19,Male,\n,,Female,''')\n \ndata = pd.read_csv(data_file)\nprint(data)\n\n\ndata.iloc[:, [0,1,3]]= data.iloc[:, [0,1,3]].fillna(data.iloc[:, [0,1,3]].mean())\ngender_dummies = pd.get_dummies(data['Gender'], dummy_na=True)\ndata = pd.concat([data, gender_dummies], axis=1)\ndata = data.drop('Gender', axis=1)\n\nprint(data)","kernel":"python3","last":40,"output":{"0":{"name":"stdout","text":"   Customer ID   Age  Gender  Purchase amount\n0        123.0   NaN    Male            130.0\n1        135.0  27.0     NaN            120.0\n2        112.0  24.0  Female             80.0\n3        142.0   NaN  Female             30.0\n4          NaN   NaN     NaN             45.0\n5        100.0  19.0    Male              NaN\n6          NaN   NaN  Female              NaN\n   Customer ID        Age  Purchase amount  Female   Male    NaN\n0        123.0  23.333333            130.0   False   True  False\n1        135.0  27.000000            120.0   False  False   True\n2        112.0  24.000000             80.0    True  False  False\n3        142.0  23.333333             30.0    True  False  False\n4        122.4  23.333333             45.0   False  False   True\n5        100.0  19.000000             81.0   False   True  False\n6        122.4  23.333333             81.0    True  False  False\n"}},"pos":15,"start":1729903911152,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6db703","input":"## Tensor Operations:\n\n**QUESTION 1** : Create two tensors of size (3, 4), one containing only 1s and the other one containing only 2s, and perform element-wise addition, subtraction, and multiplication. Print the results.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"7d05c9","input":"**QUESTION 2**: Gradient Calculation\n\nLet $\\mathbf{x}=( x_1 , x_2, x_3 , x_4)$. Use PyTorch's Autograd to calculate the gradient of the function  $y(\\mathbf{x})=x_1^2+x_2^2+x_3^2+x_4^2-x_1-x_2-x_3-x_4$ when $\\mathbf{x}=( 1,2,3,4)$. Print the gradient in your code, together with $\\mathbf{x}$.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"820fce","input":"# Jupyter Notebook Project: Understanding the Building Blocks of Neural Networks\n\n**Goal** : To explore the fundamental concepts of neural networks without constructing a full-fledged network.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"c49ced","input":"**QUESTION 5**\n\n1. Use pandas to create a data set in your folder that corresponds to this CSV file:\n\n![csv list](customer2.png)\n\nName that data set `customer_list.csv`.\n\n2. For the `customer_list.csv` file created above modify the data by using imputation on the categorical variable `Gender'` and deleting missing numerical values in the variables `Customer ID`, `Age`, `Purchase Amount` and replacing these data items for the average of the row data.\n\n3. Convert the curated data set `customer_list.csv` into three tensors `X1,X2` and `X3`. where `X1` contains the curated data for `Gender`, `X2` contains the curated data for `customerID,Age` and `X3` contains the data for the curated data for `PurchaseAmount`. Print `X1`,`X2` and `X3`.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"ddd1db","input":"**QUESTION 3** Linear Algebra Operations\n\nDefine matrices:\n$$\nA=\\begin{pmatrix} 1.0 & 2.0 & 3.0 & 4.0\\\\ 5.0 & 6.0 & 7.0 & 8.0\\\\ 9.0 & 10.0 & 11.0 & 12.0\\end{pmatrix}\\\\ B=\\begin{pmatrix} -1.0 & -2.0 & -2.0 \\\\ -2.0 & -3.0 & -3.0 \\\\ -3.0 & -4.0 & -4.0 \\end{pmatrix} \n$$\n\nPerform matrix multiplication, transpose, and inversion using PyTorch tensors as follows:\n* Calculate and print $BA$ ( the product of matrix $A$ times matrix $B$).\n* Calculate and print $A^T$.\n* Reshape matrix $A^T$ so it becomes a matrix $B$ of shape $6*2$. Print the reshaped matrix.\n* find the sum of elements of $A$ along the second axis and print the result.\n* Perform element-wise addition of $B$ with the scalar 5. Print the result of the addition.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"dfb239","input":"**QUESTION 4** Derivatives\n\nDefine a function $h(x) =(\\ln(x))^2$. Use **only** automatic differentiation to plot the graph of $f(x)$ and $f^\\prime(x)$  together for $x$ in the interval $[1,3]$.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"f97565","input":"**END OF WORKSHEET**\n\nMake sure that you answered all the questions on time. This completed `Jupyter Notebook` will be collected and graded. \n\nOnce the `Jupyter Notebook` is collected it can not be modified.","pos":16,"type":"cell"}
{"id":0,"time":1729895425492,"type":"user"}
{"last_load":1729696924683,"type":"file"}