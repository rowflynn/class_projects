{"args":["--to","cocalc-pdf"],"start":1725811976688,"state":"done","time":1725812010005,"type":"nbconvert"}
{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1725814516379,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"010d85","input":"washington.extend([\"Right Hand Man\"])\nwashington","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"060807","input":"washington[1]","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"10fe0e","input":"len(washington)","pos":65,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3d5d3a","input":"alex = lyrics[-2:]\nalex\n\n# alternatively you can use lyrics[5:]","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"485113","input":"max(15, 25, 70)","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4c713e","input":"\"History has its eyes on you\"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4ef730","input":"washington.append(\"Back\")\nwashington","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7ab184","input":"washington.insert(0, \"I need my\")\nwashington","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"85c6b9","input":"min(1, 3)","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9d0b1a","input":"2*2","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a36fc1","input":"lst = [1,2,3,4,5]","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bee5fc","input":"lyrics = [\"I\", \"am\", \"not\", \"throwing\", \"away\", \"my\", \"shot\"]\nlyrics","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c40b41","input":"","pos":119,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cf40f0","input":"lst[0:5:1]","pos":57,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e4fd94","input":"arr = np.array(10)\narr","pos":106,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f408ec","input":"washington = []\nwashington","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"f40665","input":"3+5","output":{"0":{"data":{"text/plain":"8"},"exec_count":1,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"49b0d3","input":"burr","output":{"0":{"data":{"text/plain":"'Wait for it!'"},"exec_count":10,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"598039","input":"y = 8\nz = x+y","output":{"0":{"ename":"NameError","evalue":"name 'x' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_428/2809545446.py\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"b506ea","input":"print(\"What'd I miss\")\nprint('You\\'ll be back')","output":{"0":{"name":"stdout","output_type":"stream","text":"What'd I miss\nYou'll be back\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"4fd6ae","input":"\"York\"+\"town\"","output":{"0":{"data":{"text/plain":"'Yorktown'"},"exec_count":13,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"f684a8","input":"aaron = \"Ev’ryone give it up for America’s favorite fighting Frenchman\"\neveryone = \"Lafayette!\"\nmdl = \"I’m takin this horse by the reins\"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"897293","input":"## Write your answer to the question in this cell\nprint(aaron)\nprint(everyone)\nprint(mdl)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Ev’ryone give it up for America’s favorite fighting Frenchman\nLafayette!\nI’m takin this horse by the reins\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"65cd1e","input":"len(burr)","output":{"0":{"data":{"text/plain":"12"},"exec_count":17,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"c6723d","input":"140-20","output":{"0":{"data":{"text/plain":"120"},"exec_count":2,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"d2ce9f","input":"## Write your answer to the question in this cell\nname = \"Rowan Flynn\"\nname","output":{"0":{"data":{"text/plain":"'Rowan Flynn'"},"exec_count":21,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"ba9852","input":"## Answer the question here by completing the code below\ntheodosia = \"hamilton\"\nphilip = \"burr\"\n\n##fill these in, Version 1:\ntheodosia, philip = ...\n\n# Version 2\ntemp = theodosia\ntheodosia = philip\nphilip = temp","output":{"0":{"ename":"ValueError","evalue":"too many values to unpack (expected 2)","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_428/737499921.py\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m##fill these in, Version 1:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtheodosia\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphilip\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"test\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Version 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 2)"]}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"759044","input":"lst[::-1]","output":{"0":{"ename":"NameError","evalue":"name 'lst' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_428/3894335210.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlst\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'lst' is not defined"]}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"446d19","input":"ham_songs = [\"Alexander Hamilton\", \"Aaron Burr, Sir\", \"My Shot\", \\\n             \"The Story of Tonight\", \"The Schuyler Sisters\", \"Farmer Refuted\",\n             \"You'll be Back\", \"Right Hand Man\", \"A Winter's Ball\", \\\n             \"Helpless\", \"Satisfied\"]\n\nevery_other = ham_songs[::2] \nevery_other","output":{"0":{"data":{"text/plain":"['Alexander Hamilton',\n 'My Shot',\n 'The Schuyler Sisters',\n \"You'll be Back\",\n \"A Winter's Ball\",\n 'Satisfied']"},"exec_count":26,"output_type":"execute_result"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"552459","input":"## Write your answer to the question in this cell\ntest = [1,2,3,4,5]\ntest[1::2]","output":{"0":{"data":{"text/plain":"[2, 4]"},"exec_count":28,"output_type":"execute_result"}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"9d6283","input":"max(\"Hamilton\", \"Washington\")","output":{"0":{"data":{"text/plain":"'Washington'"},"exec_count":29,"output_type":"execute_result"}},"pos":73,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"500389","input":"40/2","output":{"0":{"data":{"text/plain":"20.0"},"exec_count":3,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"b76f65","input":"## Answer the question here by completing the code below\ndob = [1757, 1756, 1732, 1737, 1754]\ndod = [1804, 1836, 1799, 1793, 1782] \n\n##fill in\nmin_dob = min(dob)\nmin_dod = min(dod)\nmax_of_mins = max(min_dob,min_dod)\n\n\n# you can do it in one line\n\nmax_mins = max(min(dob), min(dod))\n\nprint(max_of_mins)\nprint(max_mins)","output":{"0":{"name":"stdout","output_type":"stream","text":"1782\n1782\n"}},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"c3a37f","input":"round(8.7)","output":{"0":{"data":{"text/plain":"9"},"exec_count":35,"output_type":"execute_result"}},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"5a366d","input":"abs(-3.5)","output":{"0":{"data":{"text/plain":"3.5"},"exec_count":36,"output_type":"execute_result"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"f6625a","input":"playwright = \"Lin-Manuel Miranda\"\n\nif playwright == \"Lin-Manuel Miranda\":\n    print (True)\nelse:\n    print (False)","output":{"0":{"name":"stdout","output_type":"stream","text":"True\n"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"fbdfad","input":"name = \"Burr\"\n\n# Feel free to change the value of the variable \"name\"\n\nif name == \"Hamilton\":\n    print(\"Arcadia\")\nelif name == \"Burr\":\n    print(\"Princeton\")\nelse:\n    print(\"I don't know\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Princeton\n"}},"pos":89,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"28e01a","input":"2*5+1","output":{"0":{"data":{"text/plain":"11"},"exec_count":4,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"98dbd7","input":"year = 1789\n\n# Who's the president\n\nif year>=1789 and year<1797:\n    print(\"George Washington\")\nelif year>=1797:\n    print(\"John Adams\")\nelse:\n    print(\"King George\")","output":{"0":{"name":"stdout","output_type":"stream","text":"George Washington\n"}},"pos":91,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"f8fdcc","input":"founding_fathers = [\"Jefferson\", \"Hancock\", \"Hamilton\", \"Adams\", \"Washington\", \"Burr\", \"Madison\"]\n\n# change the name in \"any_name\"\nif \"Jefferson\" in founding_fathers:\n    print(\"You are not throwing away your shot!\")\nelse:\n    print(\"You've got to be in the room where it happens!\")","output":{"0":{"name":"stdout","output_type":"stream","text":"You are not throwing away your shot!\n"}},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"d7e13f","input":"for elem in ['a', 'b', 'c']:   \n    print(elem)\n\nelem","output":{"0":{"name":"stdout","output_type":"stream","text":"a\nb\nc\n"},"1":{"data":{"text/plain":"'c'"},"exec_count":43,"output_type":"execute_result"}},"pos":96,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"fed1aa","input":"for i in range(11):\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n"}},"pos":99,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"f8b16c","input":"## Write your answer to the question in this cell\nlst = [1,2,3,4,5]\nfor elem in lst:\n    if elem > 2:\n        print(elem)\n    else:\n        print('This value is not greater than 2.')\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"This value is not greater than 2.\nThis value is not greater than 2.\n3\n4\n5\n"}},"pos":101,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"2cccfc","input":"2*(5+1)","output":{"0":{"data":{"text/plain":"12"},"exec_count":5,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"f956aa","input":"import pandas as pd\nimport numpy as np","pos":104,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"dfb5b6","input":"every_other = np.arange(0, 21, 2)\nevery_other","output":{"0":{"data":{"text/plain":"array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20])"},"exec_count":51,"output_type":"execute_result"}},"pos":108,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"f82e8a","input":"num_lst = [1, 2, 3, 4, 5]\nnum_arr = np.array(num_lst)\nnum_arr","output":{"0":{"data":{"text/plain":"array([1, 2, 3, 4, 5])"},"exec_count":52,"output_type":"execute_result"}},"pos":110,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"5483f9","input":"num_arr*2","output":{"0":{"data":{"text/plain":"array([ 2,  4,  6,  8, 10])"},"exec_count":53,"output_type":"execute_result"}},"pos":112,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"dc95aa","input":"import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 5, 100)  # Adjust range and number of points as needed\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()","output":{"0":{"data":{"image/png":"175bede2c7e47a96a7d0fe13ce0442851efad439","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":54,"metadata":{"image/png":{"height":411,"width":721},"needs_background":"light"},"output_type":"execute_result"}},"pos":117,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"f4d8ef","input":"3**2","output":{"0":{"data":{"text/plain":"9"},"exec_count":6,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"55ab6e","input":"int(1776)","output":{"0":{"data":{"text/plain":"1776"},"exec_count":7,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"2b9ac0","input":"float(1776)","output":{"0":{"data":{"text/plain":"1776.0"},"exec_count":8,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"481b43","input":"burr = \"Wait for it!\"\nburr","output":{"0":{"data":{"text/plain":"'Wait for it!'"},"exec_count":9,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"03a569","input":"We have three types of statements in the **Python** conditionals: `if`, `elif`, and `else`. We always start with \"if\", we always end with \"else\". The \"elif\" statement is optional. It literally means \"else if\". While both \"if\" and \"else\" can only be used once, \"elif\" can be used multiple times, and let you add many more conditions to your statement.\n\nIf the condition in the `if` case is False, then we move to the `elif` case. If the `elif` case is false, then we will move to the else case and perform whatever is inside the else condition. We move into the condition that has a True conditional value first and evaluate that.","pos":85,"type":"cell"}
{"cell_type":"markdown","id":"0669fe","input":"What about this cell:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"1193e3","input":"One of the data types that is commonly used in **Python** are numerals (aka numbers). \nWith numerals, **Python** can be used as a calculator. Run the cells below (and modify them as you wish)  to see it for yourself.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"15ae43","input":"Loops (aka for-loops) allow for some code to be executed repeatedly. For example, if you wish to print the numbers from 0 to 10, you can do that with the for-loop. \n\nA for-loop iterates through a sequence of elements (list, string, array, etc.) and reassigns an element (which can have any name, most common are \"x\", \"i\", \"elem\", the name in itself doesn't matter) to each element of the sequence sequentially. ","pos":95,"type":"cell"}
{"cell_type":"markdown","id":"18b4b4","input":"To store the values in **Python** (and in many other programming languages) we need to use variables. Variables can store all kinds of information. This is useful if you plan to use the same values later on in your project. It will save you time and make your code more readable. To see how we store values in variables run the cell below.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"1d9ee2","input":"We can also search through lists of values in our conditional statements to see if a word is in our list using the keyword 'in':","pos":92,"type":"cell"}
{"cell_type":"markdown","id":"1ea40e","input":"\nIn the cell below we will be using the built-in function called range( ). It enumerates the numbers from 0 up to a number you put in (exclusive of that last number).\n\n**Note:** remember that Python starts to count from 0, hence the last number you specify is not going to be included.","pos":98,"type":"cell"}
{"cell_type":"markdown","id":"26ef88","input":"## Numerals","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"2c8351","input":"Conditionals are also known as **booleans**. With conditional statements we can let the computer know when (aka under which condition) we want a specific operation to be executed. Under the hood the computer evaluates if the condition is True and performs a specific operation (like print( ), return( ), etc). Some of the most popular conditional statements are:","pos":83,"type":"cell"}
{"cell_type":"markdown","id":"38f8b8","input":"So does Python know that George Washington was older than Alexander Hamilton? Of course not, when comparing strings, Python goes of off the letters of alphabet. Since \"W\" goes after \"H\" in the alphabet, \"Washington\" is a value that is \"bigger\" than \"Hamilton\".","pos":74,"type":"cell"}
{"cell_type":"markdown","id":"3b55b0","input":"Another valuable function you can use with your numerals is \"round\". It will round your floats to the nearest integer. Like so:","pos":77,"type":"cell"}
{"cell_type":"markdown","id":"3c6eef","input":"Note: if you wish to start iterating from the end of a list backwards, we use a negative step:","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"406e09","input":"You can also use these functions with strings. Can you guess what the output will be?","pos":72,"type":"cell"}
{"cell_type":"markdown","id":"423327","input":"Let's say you want to save only the two last words from your old list into your new list. That's what you will need to do then:","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"4c2ccd","input":"Sometimes you just need to use part of the list. In this case you can use \":\" to modify your list. Let's make a new list:","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"51eb86","input":"# Python's Data Types ","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"57e9e0","input":"To add the values into your list you can either use lst.append( ), lst.insert( ), or lst.extend( ).","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"586d9e","input":"**QUESTION 1**\n\nTry using print( ) in the cell below to output all the three lines of lyrics of \"Guns and Ships\".\n\n**Hint:** you'll need to use it three times.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"690a69","input":"In the next line, let's ask **Python** to print the name of the school two of the Founding Fathers went based on their name. Feel free to change the string our \"name\" variable is assigned to.","pos":88,"type":"cell"}
{"cell_type":"markdown","id":"6a6763","input":"# Conditionals and For-loops","pos":81,"type":"cell"}
{"cell_type":"markdown","id":"73c7eb","input":"Although Python doesn't have a lot of functions and methods by itself, it is not like it doesn't have any. Let's go over some of the most valuable built-in funsctions in Python.","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"7d320e","input":"A string is a sequence of characters. If you want to see how many characters your string has, use the len() method. Do you think spaces are considered characters in Python? Check if your intuition was correct by running the cell below.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"8404f7","input":"## Loops","pos":94,"type":"cell"}
{"cell_type":"markdown","id":"860215","input":"If you don't assign any value to the variable and call it later, it will give you an error. We can see it in the cell below. (It will give you an error, but it was planned that way)","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"862273","input":"**A == B: True if A equals B**\n\n**A != B: True if A is not equal to B**\n\n**A > B: True if A is greater than B. Same syntax for \"<\"**\n\n**A >= B: True if A is greater than or equal to B. Same syntax for \"<=\"**","pos":84,"type":"cell"}
{"cell_type":"markdown","id":"8ee166","input":"**QUESTION 4)** \n\nCreate a list with the values 1, 2, 3, 4, and 5 and only get the values 2 and 4","pos":66,"type":"cell"}
{"cell_type":"markdown","id":"93eaa7","input":"Another useful function we can use with numbers is \"abs\". It outputs an absolute value of a number:","pos":79,"type":"cell"}
{"cell_type":"markdown","id":"95543f","input":"**Note:** Python starts counting at 0, not 1.","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"96491b","input":"Notice, that the `insert` method takes two positional values. You need to specify the index in the list at which it will be inserted, whilst append just adds the value to the end of the list. \n`extend` takes another list as its input. If you try to use a string or a number by itself, it will give you an error.","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"98da22","input":"\n**QUESTION 3**\n\nSometimes you need to switch the values in two variables. \nIn the cell below we have the last names mixed up. The variable theodosia should have an output \"burr\" and philip should return \"hamilton\".\nHow would you approach this problem without manually retyping the outputs?\n\n**Hint** Use a temporary variable in which you can temporarily save the value of one of the other variables. ","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"99cfba","input":"Also, you can use both single and double quotes for the strings, but sometimes you need to use single quotes inside of the string and that might cause a problem (it will \"exit it out\"). \n\nYou can just always use the double quotation marks on the outside to avoid such problem. Or, you can use a backslash before the single quotation mark. It will tell Python to ignore it and not to exit it out. You can see an example of it below:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"9ada4a","input":"Notice also that if you want to learn the length of your list, you can use the same method \"len( )\", but it will not count all the characters anymore. Instead, it will count all the elements in it. Like so:","pos":64,"type":"cell"}
{"cell_type":"markdown","id":"9b32a6","input":"The strings can also be \"added\" onto one another. Run the cell below to see how it works.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"9f6914","input":"**QUESTION 6)**\n\nLet's combine what you know so far about lists, conditionals, and for loops. Create a list with values 1, 2, 3, 4, 5. Iterate through the list with a for loop, and print only the values that are greater than 2. Otherwise, print the statement \"This value is not greater than 2.\"","pos":100,"type":"cell"}
{"cell_type":"markdown","id":"9f6f13","input":"## Conditionals","pos":82,"type":"cell"}
{"cell_type":"markdown","id":"a0949a","input":"# Lists","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"a0d346","input":"When you need to access an element at a specific index, you can use the following code.\nThe code below returns the second element of the list.","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"a13e05","input":"There are a few types of numerals: `integers` and `floats`. \n\nThey are not compatible, so it is important to remember which one you are using in order to avoid bugs. Floats use decimal points, so it will be easy for you to spot them. See how the output changes when we print the same number as an `integer` and as a `float`.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"a2b966","input":"**QUESTION 2**\n\nNow create a variable name in which you will save your full name. Note that you need to call the variable once again in order to get an output.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"a2d4c0","input":"Guess what a double star notation does? Run the cell below to see if you had the right intuition about it.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"a3eede","input":"It is time for us to introduce a concept of **Python** libraries. \n\nAs we mentioned before, **Python** is not a very powerful programming language by itself. What makes it powerful are the libraries people wrote for it. Libraries are the sets of different functions that you can import and use. The two most popular libraries are numpy and pandas.\n\n\nSince we are using **Cocalc**, a lot of libraries have been preloaded for you. You just need to \"call\" them. Just run the cell below. It will make our notebook know that we will be using these preinstalled libraries from that point on. ","pos":103,"type":"cell"}
{"cell_type":"markdown","id":"a519b4","input":"#  Built-in Functions","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"a80684","input":"You can also convert a list of numbers in Python into an array:","pos":109,"type":"cell"}
{"cell_type":"markdown","id":"a91177","input":"You have learnt about the strings and numerals, it's time to take it up a notch. Another useful and very popular data type is a **Python** list.\nLists can take various data types (both numerals, strings, arrays, other lists, etc). \n\nTo create an empty list just make your variable equal to \"[ ]\", like so:","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"b11288","input":"Try performing the same operation with the initial list of numbers instead. What do you think the output will be in the cell below?","pos":114,"type":"cell"}
{"cell_type":"markdown","id":"b6c6a4","input":"# Plots\n\nTo do visualizations, we will need to import yet another library.","pos":116,"type":"cell"}
{"cell_type":"markdown","id":"b7ce09","input":"**Note:** \"=\" and \"==\" are not the same operations in **Python**. A single equals sign (=) assignes the value to the right of it to the variable name to the left of it. While the double equals sign (==) compares if the value on the right is equal to the value to the left of it. ","pos":87,"type":"cell"}
{"cell_type":"markdown","id":"bb116d","input":"In the cell below guess what the output will be, before you run it. Feel free to change the numeral under the variable \"year\".","pos":90,"type":"cell"}
{"cell_type":"markdown","id":"bc1035","input":"With the help of numpy we can introduce a new data type - arrays. \n\nArrays are commonly used with Data Frames (basically, tables of values). There are a lot of functions and methods that can be used with arrays when one is analysing their data. The main difference between the lists and arrays is that an array can take only one type of data (eg. only numerals, or strings, but never both).\n\nTo create an array with values, just make your variable equal to np.array(\"your value\")","pos":105,"type":"cell"}
{"cell_type":"markdown","id":"bef1b6","input":"# Working with Libraries","pos":102,"type":"cell"}
{"cell_type":"markdown","id":"c52a4f","input":"As you can see, all the values in our array got mutliplied by 2.","pos":113,"type":"cell"}
{"cell_type":"markdown","id":"c5abed","input":"## Strings","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"c9946b","input":"Sometimes you just need to use part of the list or copy the whole list into a new variable. In this\ncase you can use \":\" to modify your list.\nThe notation is:\n\n**a = b[start:stop:step]**\n\n***start***: the index you want to start with. (the default is 0)\n\n***stop***: the index you want to end with. (the default is the last number)\n\n***step***: use it, if you wish to skip some indeces (eg. use only every other value). For example, if you start with index 1 and step is 2, you will iterate through the 1st index, then 3rd, then 5th, etc. until you get to the stopping index. (the default is 1)\n\nNote that python will stop iterating at the value before the last index. See the following example:","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"cebd02","input":"Here, we did not assign x to anything, and since x was not defined, we cannot add its value to y, so this produces an error.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"d04bdd","input":"When we are using **Jupyter Notebooks**, the last line is printed out automatically (unless it is performing some other operation, eg. getting assigned to a specific value). \n\nBut if you would like to print more than just the last line, you can use the `print( )` method. If you just run the next cell, it will not give you any output.","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"d292a3","input":"That is why in the previous code cell we can see that when an \"elem\" is called at the end of the loop, it is equal to \"c\" which is the last element of the sequence.","pos":97,"type":"cell"}
{"cell_type":"markdown","id":"d40603","input":"```\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-25-33c5b6ca9af3> in <module>()\n      1 y = 8\n----> 2 z = x+y\n\nNameError: name 'x' is not defined\n```","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"de454d","input":"**END OF WORKSHEET**\n\n* Make sure that you answered all the questions. \n\n* When done, please go to the `File` option for Cocalc and select export as a pdf:\n\n![finalimage](finalimage.png)\n\n---\n\n**RECALL**: This completed `Jupyter Notebook Assigment` will be collected and graded. \n\nOnce the `Jupyter Notebook Assigment ` is collected it can not be modified.\n\n---","pos":118,"type":"cell"}
{"cell_type":"markdown","id":"e5dda9","input":"# Homework 2: Intro to Python","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"e689cd","input":"**QUESTION 5)**\n\nWe have created two lists with different integers. Let's now find the biggest number among the two smallest numbers in two lists. In other words, let's find the max( ) of the two min( ). You can achieve it with either 3 or 1 lines of code.","pos":75,"type":"cell"}
{"cell_type":"markdown","id":"e715ac","input":"You can do some arithmetic with arrays. Guess what will be the output of this line of code before you run it:","pos":111,"type":"cell"}
{"cell_type":"markdown","id":"ea1bf7","input":"A very useful method that can be used with an array of numbers is np.arange( ). It takes at least 2, sometimes 3 positional arguments. The first number will be the starting point of your array, the last one will identify up to which number your array will go (not inclusive). The third positional argument is optional, it shows how many steps an array should skip through. (This is very similar to lists)\n\nFor example, if you need an array with numbers from 0 to 20, but you only want for it to include every other number, you will need add a third positional argument.","pos":107,"type":"cell"}
{"cell_type":"markdown","id":"ec6481","input":"The phrases and words in Python are always stored inbetween double or single quotation marks. They are formally called strings.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"ee14a1","input":"**Python** follows the same arithmetic rules as we do. So guess what the output of the next cell will be:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"f29476","input":"In this lab you will be familiarizing yourself with the programming language called [**Python**](https://www.python.org/). \n\n>Feel free to execute and modify the code cell. You should experiment with **Python** statements to understand the language.\n\n**Python** is a so-called high level programming language. Which means it is very abstracted from machine languages and are easily readable by humans. \n\n**Python** is one of the most popular programming languages nowadays, and is used in various spheres from research and Data Science to Machine Learning and Artificial Intelligence.\n\nIn this worksheet you will also learn some of the most popular **Python** libraries such as `Pandas`, `Numpy`, and `Matplotlib`. Libraries are used to make **Python** more efficient. By itself (solely with built-in functions and methods), Python is not a very useful language, hence people keep building libraries (sets of functions and methods) that can be used together with **Python** in order to make it more useful.","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"f34428","input":"## Variables","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f9b456","input":"As you can see, lists and arrays not only can be used differently, but they also give different outputs when we are using the same operations on them.","pos":115,"type":"cell"}
{"id":0,"time":1725811963025,"type":"user"}
{"last_load":1725811963442,"type":"file"}